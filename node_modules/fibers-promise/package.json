{
  "name": "fibers-promise",
  "description": "Simple promises for use with fibers.",
  "version": "0.0.3",
  "author": {
    "name": "Lukasz Mielicki",
    "email": "mielicki@gmail.com"
  },
  "main": "fibers-promise",
  "engines": {
    "node": ">=0.3.6"
  },
  "dependencies": {
    "fibers": ">=0.1.0"
  },
  "readme": "# Intoruction\n\n`fibers-promise` is a small yet powerful library based on [fibers](https://github.com/laverdet/node-fibers).\n\nA promise is just a value container with build-in synchronisation mechanism. Promises allow you to get rid of callbacks clutter.\n\nYou may also like [fiberize](http://github.com/lm1/node-fiberize).\n\n# Getting started\n\n    npm install fibers-promise\n    \nThis will install node-fibers as well. (Working g++ and node headers are required.)\n\nThen run your code with:\n\n    node-fibers your_file.js\n\n# Example\n\nTo fetch an url:\n\n    var http = require('http');\n    var promise = require('fibers-promise');\n    \n    promise.start(function() {\n      \n      var p = promise();\n    \n      http.get({\n          host: 'www.google.com',\n          port: 80,\n          path: '/'\n      }, p);\n    \n      var res = p.get();\n      res.setEncoding('utf8');\n      res.on('data', p);\n      res.on('end', p);\n    \n      var data, chunk;\n      while (chunk = p.get()) {\n        data += chunk;\n      }\n      console.log(data);\n    });\n\n# Interface\n\n    var promise = require('fibers-promise');\n\n### promise()\n\n`promise` is a factory method returning new `Promise` object with the following methods:\n\n  - `Promise.set(value)`\n\n  `set` method sets the promise value and resumes a fiber waiting for it (if any).\n\n  - `Promise(...)`\n\n  `Promise` object is itself a function which when called sets promise value like a `set` method.\n  If more than a single value is provided, promise value is set to an array containing all provided values.\n  Thus it's possible to pass promise just as a callback to the asynchronous function.\n\n  - `Promise.get()`\n\n  Waits until the promise has a value and returns the value.\n\n  - `Promise.ready()`\n\n  Checks if promise has a value already. Returns a boolean.\n\n  - `Promise.wait()`\n\n  Waits until a promise has a value.\n\n### promise.t()\n\nThis is also a factory method similar to `promise()`, but the `get()` method of this promise behaves as follows:\n\n  - Single argument has been provided to `Promise(...)`\n\n    If the value evaluates to true it's thrown; nothing is returned.\n\n  - Two arguments were provided to `Promise(...)`\n\n    If the first value evaluates to true it's thrown, second value is returned.\n\n  - Three or more arguments were provided to `Promise(...)`\n\n    If the first value evaluates to true it's thrown; remaining values are returned in form of an Array.\n\nThis type of promise is useful when passed as callback to most node asynchronous methods.\n\n### promise.start(f, [args...])\n\n`start` runs `f` in a new fiber and passes `args` to `f`.\n\n### promise.task(f)\n\nReturns a function which will execute `f` in new fiber upon invocation. All the arguments of the returned function are passed directly to `f`. Useful to postpone start of a fiber, or wrap a callback with a fiber.\n\n### promise.waitAny(...)\n\nWaits for multiple promises, the first promise which has a value is returned.\n\n### promise.waitAll(...)\n\nWaits until all provided promises have values.\n\n### promise.sleep(ms)\n\nSuspends current fiber for `ms` miliseconds. Does not block the event loop, thus other fibers may execute.\n",
  "readmeFilename": "README.md",
  "_id": "fibers-promise@0.0.3",
  "dist": {
    "shasum": "c8d45760c356f5e1748fd97e7d9de5dc3c08b780"
  },
  "_from": "fibers-promise@0.0.3"
}
